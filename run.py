#!/usr/bin/env python3
"""
Script simplificado para executar o Intelligent Library
Usage: python run.py
"""

import os
import sys
import subprocess
import time
import threading
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Erro: Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} OK")
    return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    requirements_file = Path("requirements_atualizado.txt")
    if not requirements_file.exists():
        print("‚ùå Arquivo requirements_atualizado.txt n√£o encontrado")
        return False
    
    print("üîç Verificando depend√™ncias Python...")
    try:
        # Tenta importar as principais depend√™ncias
        import eel
        import langchain
        import openai
        print("‚úÖ Depend√™ncias principais OK")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("üì¶ Instalando depend√™ncias...")
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements_atualizado.txt"], 
                         check=True, capture_output=True)
            print("‚úÖ Depend√™ncias instaladas com sucesso")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå Erro ao instalar depend√™ncias")
            return False

def run_backend():
    """Executa o backend Python"""
    print("üêç Iniciando backend Python...")
    try:
        subprocess.run([sys.executable, "app_consolidado.py"], check=True)
    except KeyboardInterrupt:
        print("\nüõë Backend interrompido pelo usu√°rio")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro no backend: {e}")
    except FileNotFoundError:
        print("‚ùå Arquivo app_consolidado.py n√£o encontrado")

def run_electron():
    """Executa o frontend Electron (se dispon√≠vel)"""
    print("‚ö° Tentando iniciar Electron...")
    
    # Verifica se o Node.js est√° dispon√≠vel
    try:
        subprocess.run(["node", "--version"], check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Node.js n√£o encontrado. Apenas o backend ser√° executado.")
        return False
    
    # Verifica se o Electron est√° instalado
    if not Path("node_modules").exists():
        print("üì¶ Instalando depend√™ncias Node.js...")
        try:
            subprocess.run(["npm", "install"], check=True)
        except subprocess.CalledProcessError:
            print("‚ùå Erro ao instalar depend√™ncias Node.js")
            return False
    
    # Executa o Electron
    try:
        subprocess.run(["npm", "start"], check=True)
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao iniciar Electron")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Intelligent Library - Iniciador Autom√°tico")
    print("=" * 50)
    
    # Verifica√ß√µes b√°sicas
    if not check_python_version():
        sys.exit(1)
    
    if not check_dependencies():
        sys.exit(1)
    
    # Verifica se os arquivos principais existem
    required_files = ["app_consolidado.py", "license_manager.py"]
    for file in required_files:
        if not Path(file).exists():
            print(f"‚ùå Arquivo {file} n√£o encontrado")
            sys.exit(1)
    
    print("‚úÖ Todos os arquivos necess√°rios encontrados")
    print("\nüéØ Escolha o modo de execu√ß√£o:")
    print("1. Backend + Frontend (Electron) - Recomendado")
    print("2. Apenas Backend (Abrir http://localhost:8000 no navegador)")
    print("3. Sair")
    
    try:
        choice = input("\nDigite sua op√ß√£o (1-3): ").strip()
        
        if choice == "1":
            print("\nüöÄ Executando modo completo...")
            # Tenta executar com Electron
            if not run_electron():
                print("\n‚ö†Ô∏è  Electron falhou, executando apenas backend...")
                run_backend()
        
        elif choice == "2":
            print("\nüöÄ Executando apenas backend...")
            print("üìñ Ap√≥s iniciar, abra http://localhost:8000 no seu navegador")
            run_backend()
        
        elif choice == "3":
            print("üëã At√© logo!")
            sys.exit(0)
        
        else:
            print("‚ùå Op√ß√£o inv√°lida")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüëã Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

if __name__ == "__main__":
    main()